# This is a template. Referenced variables (e.g. $RAILS_ROOT) need
# to be rewritten with real values in order for this file to work.

upstream upstream_app {
  server app:3000;
}

upstream upstream_node_exporter {
  server node_exporter:9100;
}

# timeout config
proxy_connect_timeout       600;
proxy_send_timeout          600;
proxy_read_timeout          600;
send_timeout                600;

# Fallback server match return 404
# This means that any request no matching the domain will return 404
server {
  listen 80 default_server;
  listen 443 ssl default_server;
  server_name _;
  ssl_certificate /etc/letsencrypt/live/dashboardchatbot.fernandoguillen.info/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/dashboardchatbot.fernandoguillen.info/privkey.pem;
  return 404;
}

# port 80
server {
  listen 80;
  server_name dashboardchatbot.fernandoguillen.info localhost 127.0.0.1;

  location / {
      return 301 https://$host$request_uri;
  }

  # letsencrypt
  location /.well-known/acme-challenge/ {
      root /var/www/certbot;
  }
}

# Default server
server {
  listen 443 ssl;
  server_name dashboardchatbot.fernandoguillen.info localhost 127.0.0.1;

  ssl_certificate /etc/letsencrypt/live/dashboardchatbot.fernandoguillen.info/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/dashboardchatbot.fernandoguillen.info/privkey.pem;

  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # define the public application root
  root   $RAILS_ROOT/public;
  index  index.html;

  # define where Nginx should write its logs
  access_log $RAILS_ROOT/log/nginx.access.log;
  error_log $RAILS_ROOT/log/nginx.error.log;

  # letsencrypt
  location /.well-known/acme-challenge/ {
      root /var/www/certbot;
  }

  # Basic auth for the metrics routes :: INI
  location ~ ^/node_exporter/(.*)$ {
    auth_basic             "Restricted";
    auth_basic_user_file   /etc/nginx/.htpasswd;

    proxy_pass             http://upstream_node_exporter/$1;
  }

  location /metrics {
    auth_basic             "Restricted";
    auth_basic_user_file   /etc/nginx/.htpasswd;

    try_files              $uri @rails;
  }
  # Basic auth for the metrics routes :: END

  # deny requests for files that should never be accessed
  location ~ /\. {
    deny all;
  }

  location ~* ^.+\.(rb|log)$ {
    deny all;
  }

  # serve static (compiled) assets directly if they exist (for rails production)
  location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/ {
    try_files $uri @rails;

    access_log off;
    gzip_static on; # to serve pre-gzipped version

    expires max;
    add_header Cache-Control public;

    # Some browsers still send conditional-GET requests if there's a
    # Last-Modified header or an ETag header even if they haven't
    # reached the expiry date sent in the Expires header.
    add_header Last-Modified "";
    add_header ETag "";
    break;
  }

  # send non-static file requests to the app server
  location / {
    try_files $uri @rails;
  }

  # send cable requests to the app/cable server
  location /cable {
    try_files $uri @rails_cable;
  }

  location @rails {
    proxy_pass http://upstream_app;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
  }

  location @rails_cable {
    proxy_pass http://upstream_app;
    proxy_http_version 1.1;
    proxy_set_header Upgrade "websocket";
    proxy_set_header Connection "Upgrade";
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
