FROM ruby:3.3.4-alpine3.20

# Install dependencies
RUN apk update --no-cache
RUN apk upgrade

RUN apk add --no-cache build-base git curl
RUN apk add --no-cache bash libstdc++ zlib pkgconfig autoconf automake libtool nasm
RUN apk add --no-cache tzdata nodejs npm openjdk8 libxml2 libxslt gcompat imagemagick
RUN apk add --no-cache gifsicle jpegoptim libpng libjpeg-turbo libjpeg-turbo-utils optipng pngcrush pngquant
RUN apk add --no-cache advancecomp --repository http://dl-cdn.alpinelinux.org/alpine/edge/community
RUN apk add --no-cache jhead --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing
RUN npm install -g --force --unsafe-perm=true --allow-root svgo advpng-bin
RUN apk add --update --no-cache openssh

# Informer gem (onnxruntime)
RUN apk add --no-cache onnxruntime --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/ -X http://dl-cdn.alpinelinux.org/alpine/edge/community/ -X http://dl-cdn.alpinelinux.org/alpine/edge/main

# For mysql
RUN apk add --no-cache mariadb-dev

# Install postgresql dependencies
RUN apk add libpq-dev

# Set an environment variable where the Rails app is installed to inside of Docker image:
ENV RAILS_ROOT /var/www/app
RUN mkdir -p $RAILS_ROOT

# Set working directory, where the commands will be ran:
WORKDIR $RAILS_ROOT

# Setting env up
ENV RAILS_ENV="production"
ENV RACK_ENV="production"

# Basic folders (required by puma)
RUN mkdir -p tmp/pids
RUN mkdir -p tmp/sockets

# Adding gems
COPY Gemfile Gemfile
COPY Gemfile.lock Gemfile.lock

RUN bundle install --jobs 1 --retry 2 --without development test

# Adding project files
COPY . .
# RUN bundle exec rails assets:precompile

EXPOSE 3000
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
